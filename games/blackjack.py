from random import choice

from aiogram import html

from db import requests

TRANSLATION_VALUES = {
    '1': 'üÉè',  # 1 or 11
    '2': '2Ô∏è‚É£',
    '3': '3Ô∏è‚É£',
    '4': '4Ô∏è‚É£',
    '5': '5Ô∏è‚É£',
    '6': '6Ô∏è‚É£',
    '7': '7Ô∏è‚É£',
    '8': '8Ô∏è‚É£',
    '9': '9Ô∏è‚É£',
    '0': 'üîü',
    'j': 'üë≥',  # 10
    'q': 'üë∏',  # 10
    'k': 'ü§¥',  # 10
}


def sum_card(cards_player):
    text = '| '
    ace, sum_values = 0, 0

    for card in cards_player:
        suit, value = card[0], card[1]  # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Å—Ç—å –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
        text_translation_value = TRANSLATION_VALUES[value]  # –ü–µ—Ä–µ–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —ç–º–æ–¥–∑–∏

        # –ü–æ–¥—Å—á–µ—Ç —Å—É–º–º—ã –∫–∞—Ä—Ç
        if value == '1':  # –¢—É–∑
            ace += 1
        elif value in '0jqk':  # 10, –≤–∞–ª–µ—Ç, –¥–∞–º–∞, –∫–æ—Ä–æ–ª—å
            sum_values += 10
        else:
            sum_values += int(value)

        text += f'{suit}{text_translation_value} | '

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–∑—ã –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ä—Ç
    for _ in range(ace):
        sum_values += 11 if sum_values + 11 <= 21 else 1

    return text.strip(), sum_values


def new_give_card(cards_player):
    while True:
        suits = ['‚ô†', '‚ô£', '‚ô•', '‚ô¶']
        values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'j', 'q', 'k']  # 0 = 10

        suit = choice(suits)
        value = choice(values)

        cards = f'{suit}{value}'
        if not cards_player:
            return cards

        if not (cards in cards_player):
            return cards


async def give_player_cards(user_id: int, money: int) -> str:
    text_card_player, bet = await requests.get_or_create_blackjack(user_id, money)

    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç (–µ—Å–ª–∏ –ø—É—Å—Ç–æ–π ‚Äî –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π)
    cards_player = sorted(text_card_player.split(':')) if text_card_player else []

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç
    n = 2 if not cards_player else 1
    for _ in range(n):
        card = new_give_card(cards_player)  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç **–û–î–ù–£** –∫–∞—Ä—Ç—É
        cards_player.append(card)

    text, sum_cards_player = sum_card(cards_player)  # –ü–µ—Ä–µ–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç

    # –°–æ–∑–¥–∞—ë–º –æ—Ç–≤–µ—Ç
    result = f'–†—É–∫–∞: {text}\n–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç: {sum_cards_player}'
    cards = ':'.join(cards_player)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞—Ä—Ç

    await requests.update_blackjack(user_id, cards)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    return result


async def pass_player_card(user_id: int) -> str:
    text_card_player, bet = await requests.get_or_create_blackjack(user_id)

    if not text_card_player:
        await requests.remove_blackjack(user_id)
        return '–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç!'

    await requests.remove_money(user_id, bet)
    await requests.remove_blackjack(user_id)
    return '–í—ã —Å–∫–∏–Ω—É–ª–∏ –∫–∞—Ä—Ç—ã!'


async def dealer_walk(user_id: int) -> str:
    text_card_player, bet = await requests.get_or_create_blackjack(user_id)

    if not text_card_player:
        await requests.remove_blackjack(user_id)
        return "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç!"

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
    cards_player = text_card_player.split(":")
    cards_dealer = []

    # –õ–æ–≥–∏–∫–∞ –¥–∏–ª–µ—Ä–∞ (–¥–æ–±–∏—Ä–∞–µ—Ç, –ø–æ–∫–∞ < 17)
    sum_card_dealer = 0
    while sum_card_dealer < 17:
        card = new_give_card(cards_dealer + cards_player)
        cards_dealer.append(card)
        text_cards_dealer, sum_card_dealer = sum_card(cards_dealer)

    # –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
    text_cards_player, sum_card_player = sum_card(cards_player)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if sum_card_player > 21:
        win_or_loss = "–î–∏–ª–µ—Ä"
        coins = -bet
    elif sum_card_dealer > 21 or sum_card_player > sum_card_dealer:
        win_or_loss = "–ò–≥—Ä–æ–∫"
        coins = bet
    elif sum_card_player == sum_card_dealer:
        win_or_loss = "–ù–∏—á—å—è"
        coins = 0
    else:
        win_or_loss = "–î–∏–ª–µ—Ä"
        coins = -bet

    if coins != 0:
        await requests.change_balance(user_id, coins)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    n = 16 + (max(len(cards_dealer), len(cards_player)) * 8)
    win_text = f"\n–í—ã {'–≤—ã–π–≥—Ä–∞–ª–∏' if coins > 0 else '–ø—Ä–æ–∏–≥—Ä–∞–ª–∏'} {html.bold(abs(bet))} –º–æ–Ω–µ—Ç" if coins != 0 else ""

    text = (
        f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {text_cards_dealer}\n–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç: {sum_card_dealer}\n"
        f"{'_' * n}\n"
        f"–ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞: {text_cards_player}\n–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç: {sum_card_player}\n"
        f"{'_' * n}\n"
        f"–í—ã–π–≥—Ä–∞–ª: {html.bold(win_or_loss)}{win_text}"
    )

    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await requests.remove_blackjack(user_id)

    return text


